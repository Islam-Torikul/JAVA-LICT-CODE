{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "provenance": [],
      "toc_visible": true,
      "machine_shape": "hm"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "1UIuVo4LkCLP",
        "colab_type": "code",
        "outputId": "1467c7df-989d-4bc5-a097-dac5d0fa77e4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 54
        }
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive/')"
      ],
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Drive already mounted at /content/drive/; to attempt to forcibly remount, call drive.mount(\"/content/drive/\", force_remount=True).\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vF41UAUtkGLf",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import os,cv2\n",
        "import numpy as np\n",
        "import random as rn\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "from sklearn.utils import shuffle\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "from keras.utils import np_utils\n",
        "from keras.models import Sequential\n",
        "from keras.layers.core import Dense, Dropout, Activation, Flatten\n",
        "from keras.layers.convolutional import Convolution2D, MaxPooling2D\n",
        "from keras.optimizers import SGD,RMSprop,adam\n",
        "from keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau\n",
        "from sklearn.model_selection import cross_val_score"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2LfgkPr-kSjj",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from keras.models import Sequential,Model,load_model\n",
        "from keras.optimizers import SGD\n",
        "from keras.layers import BatchNormalization, Lambda, Input, Dense, Convolution2D, MaxPooling2D, AveragePooling2D, ZeroPadding2D, Dropout, Flatten, merge, Reshape, Activation\n",
        "from keras.layers.merge import Concatenate\n",
        "from keras.preprocessing.image import ImageDataGenerator\n",
        "from keras.callbacks import ModelCheckpoint\n",
        "import keras.backend as K\n",
        "import keras as keras"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mu3BMU_hkWUH",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# First, look at everything.\n",
        "from subprocess import check_output"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xfpmTqa5kag9",
        "colab_type": "code",
        "outputId": "94fb52cb-a7c2-42c8-e909-3a0fd082ba2f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "data_path = '/content/drive/My Drive/1500augmentfinal'\n",
        "data_dir_list = os.listdir(data_path)\n",
        "#print(check_output([\"ls\", \"../input/segmented_leaf2/main/\"]).decode(\"utf8\"))\n",
        "data_dir_list.sort()\n",
        "data_dir_list"
      ],
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['2', '3', '4', '5']"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CidbIuBUklZP",
        "colab_type": "code",
        "outputId": "773b0952-2fab-40ba-a2fd-3fce77859f9e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "labels_name={'2':0,'3':1,'4':2,'5':3}\n",
        "labels_name['2']"
      ],
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4oT1n7wdkoe8",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "img_data_list=[]\n",
        "labels_list = []"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "D67GrODykqyx",
        "colab_type": "code",
        "outputId": "9386e697-e87e-474c-81fd-d85332a392d8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 153
        }
      },
      "source": [
        "for dataset in data_dir_list:\n",
        "    img_list=os.listdir(data_path+'/'+ dataset)\n",
        "    print ('Loading the images of dataset-'+'{}\\n'.format(dataset))\n",
        "    label = labels_name[dataset]\n",
        "    for img in img_list:\n",
        "        input_img=cv2.imread(data_path + '/'+ dataset + '/'+ img )\n",
        "        #input_img=cv2.cvtColor(input_img, cv2.COLOR_BGR2GRAY)\n",
        "        input_img_resize=cv2.resize(input_img,(256,256))\n",
        "        img_data_list.append(input_img_resize)\n",
        "        labels_list.append(label)"
      ],
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Loading the images of dataset-2\n",
            "\n",
            "Loading the images of dataset-3\n",
            "\n",
            "Loading the images of dataset-4\n",
            "\n",
            "Loading the images of dataset-5\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MUfGSjpdkv_y",
        "colab_type": "code",
        "outputId": "418f6e17-a4c6-4524-a1ad-f48ff98adca2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "len(img_data_list)"
      ],
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "6000"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AiRKpCBBk2QL",
        "colab_type": "code",
        "outputId": "6e1f6bc6-f763-418a-90d8-1bd963f3c8f5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "img_data = np.array(img_data_list)\n",
        "img_data = img_data.astype('float32')\n",
        "print (img_data.shape)"
      ],
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(6000, 256, 256, 3)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wFbDQDEPk4jM",
        "colab_type": "code",
        "outputId": "1ceb41fb-0e3d-4a1c-b3ae-150b41ae8f54",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "labels = np.array(labels_list)\n",
        "print(np.unique(labels,return_counts=True))"
      ],
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(array([0, 1, 2, 3]), array([1500, 1500, 1500, 1500]))\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4Zl016Vnk6xb",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "img_rows=256\n",
        "img_cols=256\n",
        "num_channel=3\n",
        "num_epoch=1000\n",
        "# Define the number of classes\n",
        "num_classes = 4"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OgFKdBOwk98F",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "Y = np_utils.to_categorical(labels, num_classes)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_wz4pEhGlAVb",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(img_data, Y, test_size=0.3)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3eCSwh-SlDjJ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def color_net():\n",
        "    # placeholder for input image\n",
        "    input_image = Input(shape=(256,256,3))\n",
        "    # ============================================= TOP BRANCH ===================================================\n",
        "    # first top convolution layer\n",
        "    conv1 = Convolution2D(filters=48,kernel_size=(15,11),strides=(4,4),\n",
        "                              input_shape=(256,256,3),activation='relu')(input_image)\n",
        "    conv1 = BatchNormalization()(conv1)\n",
        "    conv1 = MaxPooling2D(pool_size=(3,3),strides=(2,2))(conv1)\n",
        "\n",
        "    # second top convolution layer\n",
        "    # split feature map by half\n",
        "    top_conv2 = Lambda(lambda x : x[:,:,:,:24])(conv1)\n",
        "    bot_conv2 = Lambda(lambda x : x[:,:,:,24:])(conv1)\n",
        "\n",
        "    top_conv2 = Convolution2D(filters=64,kernel_size=(5,3),strides=(1,1),activation='relu',padding='same')(top_conv2)\n",
        "    top_conv2 = BatchNormalization()(top_conv2)\n",
        "    top_conv2 = MaxPooling2D(pool_size=(3,3),strides=(2,2))(top_conv2)\n",
        "\n",
        "    bot_conv2 = Convolution2D(filters=64,kernel_size=(5,3),strides=(1,1),activation='relu',padding='same')(bot_conv2)\n",
        "    bot_conv2 = BatchNormalization()(bot_conv2)\n",
        "    bot_conv2 = MaxPooling2D(pool_size=(3,3),strides=(2,2))(bot_conv2)\n",
        "\n",
        "    # third top convolution layer\n",
        "    # concat 2 feature map\n",
        "    top_conv3 = Concatenate()([top_conv2,bot_conv2])\n",
        "    top_conv3 = Convolution2D(filters=192,kernel_size=(5,3),strides=(1,1),activation='relu',padding='same')(top_conv3)\n",
        "\n",
        "    # fourth top convolution layer\n",
        "    # split feature map by half\n",
        "    top_conv4 = Lambda(lambda x : x[:,:,:,:96])(top_conv3)\n",
        "    bot_conv4 = Lambda(lambda x : x[:,:,:,96:])(top_conv3)\n",
        "\n",
        "    top_conv4 = Convolution2D(filters=96,kernel_size=(5,3),strides=(1,1),activation='relu',padding='same')(top_conv4)\n",
        "    bot_conv4 = Convolution2D(filters=96,kernel_size=(5,3),strides=(1,1),activation='relu',padding='same')(bot_conv4)\n",
        "\n",
        "    # fifth top convolution layer\n",
        "    top_conv5 = Convolution2D(filters=64,kernel_size=(5,3),strides=(1,1),activation='relu',padding='same')(top_conv4)\n",
        "    top_conv5 = MaxPooling2D(pool_size=(3,3),strides=(2,2))(top_conv5) \n",
        "\n",
        "    bot_conv5 = Convolution2D(filters=64,kernel_size=(5,3),strides=(1,1),activation='relu',padding='same')(bot_conv4)\n",
        "    bot_conv5 = MaxPooling2D(pool_size=(3,3),strides=(2,2))(bot_conv5)\n",
        "\n",
        "   \n",
        "\n",
        "    conv_output = Concatenate()([top_conv5,bot_conv5])\n",
        "\n",
        "    # Flatten\n",
        "    flatten = Flatten()(conv_output)\n",
        "\n",
        "    # Fully-connected layer\n",
        "    FC_1 = Dense(units=4096, activation='relu')(flatten)\n",
        "    FC_1 = Dropout(0.6)(FC_1)\n",
        "    FC_2 = Dense(units=4096, activation='relu')(FC_1)\n",
        "    FC_2 = Dropout(0.6)(FC_2)\n",
        "    output = Dense(units=4, activation='softmax')(FC_2)\n",
        "    \n",
        "    model = Model(inputs=input_image,outputs=output)\n",
        "    sgd = SGD(lr=1e-3, decay=1e-6, momentum=0.9, nesterov=True)\n",
        "    # sgd = SGD(lr=0.01, momentum=0.9, decay=0.0005, nesterov=True)\n",
        "    model.compile(optimizer=sgd, loss='categorical_crossentropy', metrics=['accuracy'])\n",
        "    \n",
        "    return model"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vRVsjQVpl1je",
        "colab_type": "code",
        "outputId": "fc4a92b3-ed72-4fe4-df8e-34ec7f6e8020",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 71
        }
      },
      "source": [
        "model =color_net()"
      ],
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:Large dropout rate: 0.6 (>0.5). In TensorFlow 2.x, dropout() uses dropout rate instead of keep_prob. Please ensure that this is intended.\n",
            "WARNING:tensorflow:Large dropout rate: 0.6 (>0.5). In TensorFlow 2.x, dropout() uses dropout rate instead of keep_prob. Please ensure that this is intended.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3OBvnXlVl-jb",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "hist = model.fit(x=X_train, y=y_train, batch_size=50, epochs=80, verbose=0, validation_data=(X_test, y_test))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9tXCDMOjmSAt",
        "colab_type": "code",
        "outputId": "225eb1d4-53f4-45eb-94d9-4d138de0c4aa",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        }
      },
      "source": [
        "model.evaluate(X_test,y_test)"
      ],
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1800/1800 [==============================] - 1s 596us/step\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.24401281727684868, 0.9266666666666666]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 59
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "O90gwflrmV0z",
        "colab_type": "code",
        "outputId": "04da7b52-01a7-4944-d992-1d8b4a88f3c1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        }
      },
      "source": [
        "model.evaluate(X_train,y_train)"
      ],
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "4200/4200 [==============================] - 2s 569us/step\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.0024224941977964982, 0.9997619047619047]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Hh49gFMOJWj0",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "y_pred_validate= model.predict(X_test)\n",
        "y_pred_validate_max = np.argmax(y_pred_validate,axis=1)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "H0rGK-GZKGqq",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "y_actual_validate_max = np.argmax(y_test,axis=1)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DFdPMKmkJB1Q",
        "colab_type": "code",
        "outputId": "99fbc8b4-3d04-43b9-df60-c4b82d3eabb4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 85
        }
      },
      "source": [
        "from sklearn.metrics import confusion_matrix\n",
        "cm_validate = confusion_matrix(y_actual_validate_max, y_pred_validate_max)\n",
        "print(cm_validate)"
      ],
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[388  50   1   0]\n",
            " [ 17 396  27   1]\n",
            " [  0  13 441  16]\n",
            " [  0   0   7 443]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DGwKkCbEKz-7",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "f7e1d90c-f582-40df-c153-ccc681229ae6"
      },
      "source": [
        "from sklearn.metrics import recall_score\n",
        "recall_score(y_actual_validate_max, y_pred_validate_max, average='macro')"
      ],
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9261320949323526"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 64
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ntEyc68wLYyS",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "fe1c2b90-1d8b-43ec-9a68-aa36c92f1078"
      },
      "source": [
        "from sklearn.metrics import precision_score\n",
        "precision_score(y_actual_validate_max, y_pred_validate_max, average='macro')"
      ],
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.927570963973351"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 65
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "591K3sjXKhYQ",
        "colab_type": "code",
        "outputId": "afaec209-2357-4c14-d907-b2822aa08c67",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 353
        }
      },
      "source": [
        "import seaborn as sns\n",
        "plt.figure(figsize=(5,5))\n",
        "\n",
        "#plt.suptitle(\"Confusion Matrixes\",fontsize=20)\n",
        "\n",
        "#plt.subplot(2,3,1)\n",
        "plt.ylabel('Level')\n",
        "plt.xlabel('Level')\n",
        "plt.title(\"CNN Confusion Matrix\")\n",
        "sns.heatmap(cm_validate,cbar=False,annot=True,cmap=\"Greens\",fmt=\"d\")"
      ],
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fd515a5a358>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 66
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nRK5CYII=\n",
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JyNq53gImZV0",
        "colab_type": "code",
        "outputId": "4ea133e4-0412-488c-c057-975c27f590f1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 590
        }
      },
      "source": [
        "history =hist\n",
        "print(history.history.keys())\n",
        "# summarize history for accuracy\n",
        "plt.plot(history.history['acc'])\n",
        "plt.plot(history.history['val_acc'])\n",
        "plt.title('model accuracy')\n",
        "plt.ylabel('accuracy')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'test'], loc='upper left')\n",
        "plt.show()\n",
        "# summarize history for loss\n",
        "plt.plot(history.history['loss'])\n",
        "plt.plot(history.history['val_loss'])\n",
        "plt.title('model loss')\n",
        "plt.ylabel('loss')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'test'], loc='upper left')\n",
        "plt.show()"
      ],
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "dict_keys(['val_loss', 'val_acc', 'loss', 'acc'])\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "S0KmMlzMmkoK",
        "colab_type": "code",
        "outputId": "a11c0348-ec11-4d5e-d9b8-5429eb5291b9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "data_pathtest = '/content/drive/My Drive/final_test'\n",
        "data_dir = os.listdir(data_pathtest)\n",
        "#print(check_output([\"ls\", \"../input/segmented_leaf2/main/\"]).decode(\"utf8\"))\n",
        "data_dir.sort()\n",
        "data_dir"
      ],
      "execution_count": 69,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['2', '3', '4', '5']"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 69
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "o2YeH1shmqXd",
        "colab_type": "code",
        "outputId": "d3982540-671e-40c9-d60d-c8d7c0c0e218",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "labels_nametest={'2':0,'3':1,'4':2,'5':3}\n",
        "labels_nametest['2']"
      ],
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 70
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RcjEkgACmtir",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "img_data_listtest=[]\n",
        "labels_listtest = []"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FJAYB2ftmxoj",
        "colab_type": "code",
        "outputId": "144ce58c-8099-4bfa-df85-1ffebe2b6169",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 153
        }
      },
      "source": [
        "for dataset1 in data_dir:\n",
        "    img_listtest=os.listdir(data_pathtest+'/'+ dataset1)\n",
        "    print ('Loading the images of dataset1-'+'{}\\n'.format(dataset1))\n",
        "    labeltest = labels_nametest[dataset1]\n",
        "    for imgt in img_listtest:\n",
        "        input_imgtest=cv2.imread(data_pathtest + '/'+ dataset1 + '/'+ imgt )\n",
        "        #input_img=cv2.cvtColor(input_img, cv2.COLOR_BGR2GRAY)\n",
        "        input_img_resizetest=cv2.resize(input_imgtest,(256,256))\n",
        "        img_data_listtest.append(input_img_resizetest)\n",
        "        labels_listtest.append(labeltest)"
      ],
      "execution_count": 72,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Loading the images of dataset1-2\n",
            "\n",
            "Loading the images of dataset1-3\n",
            "\n",
            "Loading the images of dataset1-4\n",
            "\n",
            "Loading the images of dataset1-5\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Mx_dEM-Wm70p",
        "colab_type": "code",
        "outputId": "6a0be06f-41e6-47b4-9d08-c086a0edc3db",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "len(img_data_listtest)"
      ],
      "execution_count": 73,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "60"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 73
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6CwlxjsJnAgw",
        "colab_type": "code",
        "outputId": "dbf77d89-05bb-416f-fc6b-93aba38d1a24",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "img_test = np.array(img_data_listtest)\n",
        "img_test = img_test.astype('float32')\n",
        "print (img_test.shape)"
      ],
      "execution_count": 74,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(60, 256, 256, 3)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fsRf4YgqnDvD",
        "colab_type": "code",
        "outputId": "ff746928-cd79-48d0-9ab8-2135e073d82a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "l = np.array(labels_listtest)\n",
        "print(np.unique(l,return_counts=True))"
      ],
      "execution_count": 75,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(array([0, 1, 2, 3]), array([15, 15, 15, 15]))\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "D6pwcgJ_nJFK",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "t = np_utils.to_categorical(l,4)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "q7nHidzOvfOI",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oawA7hPPnM-u",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "y_pred_test= model.predict(img_test)\n",
        "y_predict_test = np.argmax(y_pred_test,axis=1)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rcehwOLznTGW",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "actual_y_max = np.argmax(t,axis=1)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rAEME26rnels",
        "colab_type": "code",
        "outputId": "ffa344c3-01d1-4276-d492-6480c3733ebd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "from sklearn.metrics import accuracy_score\n",
        "accuracy_score(actual_y_max, y_predict_test)"
      ],
      "execution_count": 79,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8166666666666667"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 79
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dGIeYapJvaWS",
        "colab_type": "code",
        "outputId": "b6c3db24-14a9-4fd2-d4a2-4e9c96a8c2c5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 85
        }
      },
      "source": [
        "from sklearn.metrics import confusion_matrix\n",
        "cm = confusion_matrix(actual_y_max, y_predict_test)\n",
        "print(cm)"
      ],
      "execution_count": 80,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[12  3  0  0]\n",
            " [ 0 11  4  0]\n",
            " [ 0  0 13  2]\n",
            " [ 0  0  2 13]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7qzFTT1cZOHS",
        "colab_type": "code",
        "outputId": "f308bbc0-e299-4b7a-9c9b-50b121d7c105",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 353
        }
      },
      "source": [
        "import seaborn as sns\n",
        "plt.figure(figsize=(5,5))\n",
        "\n",
        "#plt.suptitle(\"Confusion Matrixes\",fontsize=20)\n",
        "\n",
        "#plt.subplot(2,3,1)\n",
        "plt.ylabel('Level')\n",
        "plt.xlabel('Level')\n",
        "plt.title(\"CNN Confusion Matrix\")\n",
        "sns.heatmap(cm,cbar=False,annot=True,cmap=\"Greens\",fmt=\"d\")"
      ],
      "execution_count": 81,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fd5158d6e10>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 81
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dISe7qfrZUkm",
        "colab_type": "code",
        "outputId": "cbd7ff05-034e-4a13-ee1c-9503961b2c14",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "from sklearn.metrics import recall_score\n",
        "recall_score(actual_y_max, y_predict_test, average='macro')"
      ],
      "execution_count": 82,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8166666666666667"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 82
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vSE8LQKtZaV4",
        "colab_type": "code",
        "outputId": "da07919e-2e5f-491b-eee2-6013a14dd244",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "from sklearn.metrics import precision_score\n",
        "precision_score(actual_y_max, y_predict_test, average='macro')"
      ],
      "execution_count": 83,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8341478696741854"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 83
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0L4UWfMKZep3",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}